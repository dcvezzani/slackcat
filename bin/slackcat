#!/usr/bin/env ruby

require 'httmultiparty'
require 'trollop'
require 'time'
require 'date'
require 'byebug'
require 'json'

class Time
  # Time#round already exists with different meaning in Ruby 1.9
  def round_off(seconds = 60)
    Time.at((self.to_f / seconds).round * seconds)
  end

  def floor(seconds = 60)
    Time.at((self.to_f / seconds).floor * seconds)
  end
end

class Slackcat
  include HTTMultiParty
  base_uri 'https://slack.com/api'

  def initialize(token)
    @token = token
  end

  # I have to create my own slack integration tool for searching, I guess
  def search_time_sheet_activities(options={})
    cur_date = options[:start]
    method = 'search.messages'
    entries = []
    cnt = 0
    max_cnt = 15

    loop do
      fdate = cur_date.strftime('%Y-%m-%d')
      printf "\n>>> gathering activities for #{fdate}"
        
      query = "in:engineering from:me on:#{fdate}"
      matches = self.class.get("/#{method}", query: { token: @token, query: query }).tap do |response|
        printf "v"
        raise "error searching for #{query} from #{method}: #{response.fetch('error', 'unknown error')}" unless response['ok']
      end.fetch("messages").fetch("matches")

      entries.concat matches.map{|x| 
        printf "."
        x['ts'] = DateTime.strptime(x['ts'],'%s').to_time
        {ts: x['ts'], permalink: x['permalink'], text: x['text']}
      }

      break unless(cnt > max_cnt or cur_date < options[:stop])
      
      cur_date += (60*60*24)
      cnt += 1
    end

    entries = entries.sort_by { |h| h[:ts] }
  end

  # I have to create my own slack integration tool for searching, I guess
  def search_time_sheet_activities(options={})
    cur_date = options[:start]
    method = 'search.messages'
    entries = []
    cnt = 0
    max_cnt = 15
    channels = (ENV['SLACK_CHANNELS'] and ENV['SLACK_CHANNELS'].split(/,/)) or ['engineering']

    loop do
      channels.each do |channel|

        fdate = cur_date.strftime('%Y-%m-%d')
        printf "\n>>> gathering activities for #{fdate}"
          
        query = "in:#{channel} from:me on:#{fdate}"
        matches = self.class.get("/#{method}", query: { token: @token, query: query }).tap do |response|
          printf "v"
          raise "error searching for #{query} from #{method}: #{response.fetch('error', 'unknown error')}" unless response['ok']
        end.fetch("messages").fetch("matches")

        entries.concat matches.map{|x| 
          printf "."
          x['ts'] = DateTime.strptime(x['ts'],'%s').to_time
          {ts: x['ts'], permalink: x['permalink'], text: x['text']}
        }

        break if(cnt > max_cnt)
        cnt += 1
      end
      cur_date += (60*60*24)
      break if(cur_date > options[:stop])
    end

    entries = entries.sort_by { |h| h[:ts] }
  end

  # I have to create my own slack integration tool for searching, I guess
  def search_time_sheet_events(options={})
    days = {}
    method = 'search.messages'
    max_cnt = 15
    cnt = 0
    cur_date = options[:start]
    total_hours = 0.0

    loop do
      entries = []
      fdate = cur_date.strftime('%Y-%m-%d')
      printf "\n>>> processing #{fdate}"
        
      query = "in:engineering from:me on:#{fdate} biab"
      matches = self.class.get("/#{method}", query: { token: @token, query: query }).tap do |response|
        printf "v"
        raise "error searching for #{query} from #{method}: #{response.fetch('error', 'unknown error')}" unless response['ok']
      end.fetch("messages").fetch("matches")

      entries.concat matches.map{|x| 
        printf "."
        x['ts'] = DateTime.strptime(x['ts'],'%s').to_time
        {state: :off, ts: x['ts'], permalink: x['permalink'], text: x['text']}
      }

      query = "in:engineering from:me on:#{fdate} brb"
      matches = self.class.get("/#{method}", query: { token: @token, query: query }).tap do |response|
        printf "v"
        raise "error searching for #{query} from #{method}: #{response.fetch('error', 'unknown error')}" unless response['ok']
      end.fetch("messages").fetch("matches")

      entries.concat matches.map{|x| 
        printf "."
        x['ts'] = DateTime.strptime(x['ts'],'%s').to_time
        {state: :off, ts: x['ts'], permalink: x['permalink'], text: x['text']}
      }
      
      query = "in:engineering from:me on:#{fdate} back"
      matches = self.class.get("/#{method}", query: { token: @token, query: query }).tap do |response|
        printf "v"
        raise "error searching for #{query} from #{method}: #{response.fetch('error', 'unknown error')}" unless response['ok']
      end.fetch("messages").fetch("matches")

      entries.concat matches.map{|x| 
        printf "."
        x['ts'] = DateTime.strptime(x['ts'],'%s').to_time
        {state: :on, ts: x['ts'], permalink: x['permalink'], text: x['text']}
      }
      
      query = "in:engineering from:me on:#{fdate} good"
      matches = self.class.get("/#{method}", query: { token: @token, query: query }).tap do |response|
        printf "v"
        raise "error searching for #{query} from #{method}: #{response.fetch('error', 'unknown error')}" unless response['ok']
      end.fetch("messages").fetch("matches")

      entries.concat matches.map{|x| 
        printf "."
        x['ts'] = DateTime.strptime(x['ts'],'%s').to_time
        state = (x['text'] =~ /evening|night/) ? :off : :on
        {state: state, ts: x['ts'], permalink: x['permalink'], text: x['text']}
      }

      entries = entries.sort_by { |h| h[:ts] }
      days[fdate] = {entries: entries}

      start_entry = nil
      last_entry = nil
      seconds = 60*15
      total_time_for_day = 0.0
      start = nil
      entries.each do |entry|
        begin
          printf "."
          entry[:diff] = 0

          if(entry[:state] == :off)
            stop = Time.at((entry[:ts].to_f / seconds).round * seconds)
            start = nil
            entry[:ts] = stop
            next unless start_entry

            diff = entry[:ts] - start_entry[:ts]
            start_entry[:diff] = (diff/(60*60))

            total_time_for_day += start_entry[:diff]
            start_entry = nil
          else
            time = Time.at((entry[:ts].to_f / seconds).round * seconds)
            entry[:ts] = time

            start_entry = entry if start_entry.nil?
          end
        rescue Exception => e
          puts "Problem with entry: #{entry.inspect}
start_entry: #{start_entry.inspect}
"
          raise e
        end
        last_entry = entry
      end

      if(start_entry)
        today = Time.now.strftime("%Y%m%d")
        process_day = start_entry[:ts].strftime("%Y%m%d")

        if(today == process_day)
          time = Time.at((Time.now.to_f / seconds).round * seconds)

          diff_work = time - start_entry[:ts]
          start_entry[:diff] = diff_work/(60*60)
          total_time_for_day += start_entry[:diff]
            
          entries << {state: :pending, ts: time, text: "still working"}

        else
          entries << {state: :off, ts: last_entry[:ts], text: "good day/evening (you never checked out?)"}
        end
      end

      if entries.length > 0
        entries[entries.length-1][:diff] = 0.0 
        days[fdate][:hours] = total_time_for_day
        total_hours += days[fdate][:hours]
        printf "=> #{days[fdate][:hours]} for day; #{total_hours} for range"
      end

      break unless(cnt > max_cnt or cur_date < options[:stop])

      # go to next day
      cur_date += (60*60*24)
      cnt += 1
    end

    days[:hours] = total_hours
    report = {report: days}
    puts "\n>>> DONE!"
    report
  end
  
  ## get a channel, group, im or user list
  def get_objects(method, key)
    self.class.get("/#{method}", query: { token: @token }).tap do |response|
      raise "error retrieving #{key} from #{method}: #{response.fetch('error', 'unknown error')}" unless response['ok']
    end.fetch(key)
  end

  def channels
    @channels ||= get_objects('channels.list', 'channels')
  end

  def groups
    @groups ||= get_objects('groups.list', 'groups')
  end

  def ims
    @ims ||= get_objects('im.list', 'ims')
  end

  def users
    @users ||= get_objects('users.list', 'members')
  end

  ## get my username
  def auth
    @auth ||= get_objects('auth.test', 'user')
  end

  ## translate a username into an IM id
  def im_for_user(username)
    user = users.find do |u|
      u['name'] == username
    end
    ims.find do |im|
      im['user'] == user['id']
    end
  end

  ## upload a file or text snippet
  def upload(params)
    self.class.post('/files.upload', body: params.merge({token: @token})).tap do |response|
      raise "error uploading file: #{response.fetch('error', 'unknown error')}" unless response['ok']
    end
  end

  ## send message to one channel as a single post, instead of file upload
  def post_message(params)
    self.class.post('/chat.postMessage', body: params.merge({token: @token})).tap do |response|
      raise "error posting message: #{response.fetch('error', 'unknown error')}" unless response['ok']
    end
  end

  ## download a file posted by another user
  def download(params, save_as)
    info = self.class.get('/files.info', query: params.merge({token: @token})).tap do |response|
      raise "error retrieving information for for file #{params[:file]}: #{response.fetch('error', 'unknown error')}" unless response['ok']
    end.fetch('file')

    if download = info['url']
      uri  = URI(download)
      name = uri.path.split('/').last

      if save_as
        if File.directory?(save_as)
          name = "#{save_as}/#{name}"
        else
          name = save_as
        end
      end

      File.open(name, 'wb') { |f| f.write HTTParty.get(download).parsed_response }
      return name
    else
      raise "error determining private download URL for file #{params[:file]}"
    end
  end

end

=begin

### current
# ================================================================================

bin/slackcat --timesheet
bin/slackcat --timesheet --tsdate 2016-01-08
bin/slackcat --timesheet --tsrange last-two-weeks
bin/slackcat --timesheet --tsrange 2016-02-08:2016-02-19

target_date=$(date +%Y-%m-%d)
REAL_TAB=$(echo -e "\t"); SLACK_TOKEN=$(cat ~/.slackcat) bin/slackcat --timesheet --tsrange 2016-02-08:2016-02-19; echo -e $(cat time_sheet_report.txt) | sed 'x;G;1!h;s/\n//g;$!d' | jq -r '.report | to_entries | map(select(.key != "hours") | .value.entries | map("\(.ts) \(.diff) \(.permalink) \(.text)") | join("\n")) | join("\n\n")' | sed '/^\([[:digit:]]\{4\}\)-\([[:digit:]]\{2\}\)-\([[:digit:]]\{2\}\) \([[:digit:]]\{2\}\):\([[:digit:]]\{2\}\):\([[:digit:]]\{2\}\) [^[:space:]]\{1,\} \([\.[:digit:]]\{1,\}\) \([^[:space:]]\{1,\}\) \(.*\)/ {; s/^\([[:digit:]]\{4\}\)-\([[:digit:]]\{2\}\)-\([[:digit:]]\{2\}\) \([[:digit:]]\{2\}\):\([[:digit:]]\{2\}\):\([[:digit:]]\{2\}\) [^[:space:]]\{1,\} \([\.[:digit:]]\{1,\}\) \([^[:space:]]\{1,\}\) \(.*\)/\1'$REAL_TAB'\2'$REAL_TAB'\3'$REAL_TAB'\4'$REAL_TAB'\5'$REAL_TAB'\6'$REAL_TAB'\7'$REAL_TAB$REAL_TAB$REAL_TAB$REAL_TAB$REAL_TAB$REAL_TAB$REAL_TAB$REAL_TAB'\9'$REAL_TAB'\8/; }' > time_sheet_report-$target_date.txt; cat time_sheet_report-$target_date.txt | pbcopy; echo "hours today: $(cat time_sheet_report.txt | jq '(.report."'$target_date'".hours)')"; echo "hours for the period: $(cat time_sheet_report.txt | jq '(.report.hours)')"; echo "mvim time_sheet_report-$target_date.txt"

# ================================================================================

REAL_TAB=$(echo -e "\t"); cat time_sheet_report.txt | sed 'x;G;1!h;s/\n//g;$!d' | jq -r '.report | to_entries | map(select(.key != "hours") | .value.entries | map("\(.ts) \(.diff) \(.permalink) \(.text)") | join("\n")) | join("\n\n")' | sed '/^\([[:digit:]]\{4\}\)-\([[:digit:]]\{2\}\)-\([[:digit:]]\{2\}\) \([[:digit:]]\{2\}\):\([[:digit:]]\{2\}\):\([[:digit:]]\{2\}\) [^[:space:]]\{1,\} \([\.[:digit:]]\{1,\}\) \([^[:space:]]\{1,\}\) \(.*\)/ {; s/^\([[:digit:]]\{4\}\)-\([[:digit:]]\{2\}\)-\([[:digit:]]\{2\}\) \([[:digit:]]\{2\}\):\([[:digit:]]\{2\}\):\([[:digit:]]\{2\}\) [^[:space:]]\{1,\} \([\.[:digit:]]\{1,\}\) \([^[:space:]]\{1,\}\) \(.*\)/\1'$REAL_TAB'\2'$REAL_TAB'\3'$REAL_TAB'\4'$REAL_TAB'\5'$REAL_TAB'\6'$REAL_TAB'\7'$REAL_TAB$REAL_TAB$REAL_TAB$REAL_TAB$REAL_TAB$REAL_TAB$REAL_TAB$REAL_TAB'\9'$REAL_TAB'\8/; }' > time_sheet_report-$target_date.txt; cat time_sheet_report-$target_date.txt | pbcopy; echo "hours today: $(cat time_sheet_report.txt | jq '(.report."'$target_date'".hours)')"; echo "hours for the period: $(cat time_sheet_report.txt | jq '(.report.hours)')"; echo "mvim time_sheet_report-$target_date.txt"

# ================================================================================

STR='[{"state":"on","ts":"2016-03-21 06:19:03 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458566343000659","text":"kudos for finding the fix"},{"state":"on","ts":"2016-03-21 06:21:55 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458566515000665","text":"that must have been fun to figure out"},{"state":"on","ts":"2016-03-21 06:22:44 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458566564000667","text":"wow"},{"state":"on","ts":"2016-03-21 06:27:05 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458566825000669","text":"I guess it’s good that some where, some how there is a check to make sure the CC isn’t expired, but something like Nagios seems like a better place to put that"},{"state":"on","ts":"2016-03-21 06:35:47 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458567347000678","text":"yeah; that’s why I didn’t think including the CC in the unit tests was a good idea"},{"state":"on","ts":"2016-03-21 06:36:23 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458567383000679","text":"but it’s not a bad idea to have something bring to our attention an expired credit card"},{"state":"on","ts":"2016-03-21 06:37:05 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458567425000684","text":"oh; ok — that makes more sense now :simple_smile:"},{"state":"on","ts":"2016-03-21 06:48:44 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458568124000687","text":"<@U03JLEDS8>: with all the graphic artists we have and the kind of business that we’re in, I would imagine a good anime page would be great"},{"state":"on","ts":"2016-03-21 06:48:49 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458568129000688","text":"for the 404"},{"state":"on","ts":"2016-03-21 06:49:54 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458568194000691","text":":simple_smile:"},{"state":"on","ts":"2016-03-21 07:44:41 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458571481000695","text":"oh no"},{"state":"on","ts":"2016-03-21 10:14:11 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458580451000699","text":"perfect"},{"state":"on","ts":"2016-03-21 10:14:43 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458580483000703","text":"doesn’t look too fluffy"},{"state":"on","ts":"2016-03-21 10:30:21 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458581421000710","text":"that was fast"},{"state":"on","ts":"2016-03-21 10:30:37 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458581437000712","text":"anytime I go to the ER for anything, it’s 4 hours minimum"},{"state":"on","ts":"2016-03-21 10:31:11 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458581471000713","text":"I’m glad to hear there weren’t any fractures involved"},{"state":"on","ts":"2016-03-21 10:35:48 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458581748000715","text":"yes"},{"state":"on","ts":"2016-03-21 10:52:34 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458582754000720","text":"nothing like a little spice in life… sometimes, we could use a little less"},{"state":"on","ts":"2016-03-21 10:57:03 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458583023000723","text":"brb"},{"state":"on","ts":"2016-03-21 11:12:19 -0700","permalink":"https://crystalcommerce.slack.com/archives/engineering/p1458583939000724","text":"back"}]'

echo -e $(cat time_sheet_activities.txt | jq 'to_entries|map("\(.value.ts): \(.value.permalink) \(.value.text)")|join("\n")' |sed 's/^\"//g'|sed 's/\"$//g') > chk.txt


# ================================================================================
#
=end
unless ENV.has_key?('SLACK_TOKEN')
  # puts ">1>"
  if File.exists?(File.expand_path('~/.slackcat'))
    # puts ">2>"
    ENV['SLACK_TOKEN'] = IO.read(File.expand_path('~/.slackcat')).chomp
    # puts ">3>: #{ENV['SLACK_TOKEN']}"
  end
end

opts = Trollop::options do
  opt :token,           'Slack API token',            type: :string,  short: 'k', default: ENV.fetch('SLACK_TOKEN', nil)
  opt :channels,        'Channels to share',          type: :string,  short: 'c', default: ''
  opt :groups,          'Groups to share',            type: :string,  short: 'g', default: ''
  opt :users,           'Users (DMs) to share',       type: :string,  short: 'u', default: ''
  opt :filetype,        'File type identifier',       type: :string,  short: 't'
  opt :title,           'Title of file',              type: :string,  short: 'T'
  opt :filename,        'Filename of file',           type: :string,  short: 'n'
  opt :initial_comment, 'Initial comment to add',     type: :string,  short: 'i'
  opt :post,            'Post instead of upload',     type: :boolean, short: 'p', default: false
  opt :multipart,       'Multipart upload each file', type: :boolean, short: 'm', default: false
  opt :download,        'Download a linked file',     type: :string,  short: 'd'
  opt :save_as,         'Save downloaded file as',    type: :string,  short: 's'
  opt :message,         'Send a simple message',      type: :string,  short: 'x'
  opt :activities,      'Get timesheet events',                       short: 'A'
  opt :timesheet,       'Get timesheet events',                       short: 'X'
  opt :tsdate,          'Specify date (req :time..)', type: :string,  short: 'D', default: Time.now.strftime("%Y-%m-%d")
  opt :tsrange,         'Specify date range',         type: :string,  short: 'r', default: nil #, default: "#{(Time.now - 14*(60*60*24)).strftime("%Y-%m-%d")}:#{(Time.now).strftime("%Y-%m-%d")}"
  opt :sample,          'Get sample command'
end

raise 'set slack API token using SLACK_TOKEN or -k option' unless opts[:token]
# puts ">> #{opts[:token]}"
slack = Slackcat.new(opts[:token])

## use default channel if no destination given
if opts.values_at(:channels, :groups, :users).all?(&:empty?)
  opts[:channels] = ENV.fetch('SLACK_CHANNEL', 'engineering')
end

## translate destination names into slack ids
channels = opts[:channels].split(/[\s,]+/).map do |name|
  slack.channels.find { |channel| channel['name'] == name }.fetch('id')
end

groups = opts[:groups].split(/[\s,]+/).map do |name|
  slack.groups.find { |group| group['name'] == name }.fetch('id')
end

ims = opts[:users].split(/[\s,]+/).map do |name|
  slack.im_for_user(name).fetch('id')
end

params = {
  filetype:        opts[:filetype],
  filename:        opts[:filename],
  title:           opts[:title],
  initial_comment: opts[:initial_comment],
  channels:        (channels + groups + ims).join(',')
}.select { |_, value| value }

if opts[:sample] #put sample call in clip board

puts <<-EOL
# =============================================================================

slackcat --timesheet
slackcat --timesheet --tsdate 2016-01-08
slackcat --timesheet --tsrange last-two-weeks
slackcat --timesheet --tsrange 2016-02-08:2016-02-19

TSDATE=#{(Time.now - (60*60*24)).strftime("%Y-%m-%d")} slackcat --sample
TSDATE=#{(Time.now - (60*60*24)).strftime("%Y-%m-%d")}:#{(Time.now).strftime("%Y-%m-%d")} slackcat --sample
TSDATE=#{(Time.now).strftime("%Y-%m-%d")} slackcat --sample

SLACK_CHANNELS=engineering,internal-engineering,team-marketplace,engineering-firefight slackcat --activities --tsrange 2016-08-22:2016-09-02

# =============================================================================

EOL

# $(date -j -v -1d -f "%Y-%m-%d" "$(date +%Y-%m-%d)" +%Y-%m-%d)

  
  # puts ">>> #{ENV['TSDATE']}"
  path = File.symlink?(__FILE__) ? File.dirname(File.readlink(__FILE__)) : File.dirname(__FILE__)
  if ENV.has_key?('TSDATE')
    puts `TSDATE='#{ENV['TSDATE']}' #{path}/sample.sh`
    puts "Sample saved to clip board"
  else
    puts "Optional: define TSDATE (=2016-03-03 or =2016-03-01:2016-03-03); defaults to current date"
    puts `#{path}/sample.sh`
  end

elsif opts[:activities] 
  options = {}

  if(!opts.has_key?(:tsdate))
    opts[:tsdate] = Time.now.strftime("%Y-%m-%d")
  end

  if(opts[:tsrange])
    parts = opts[:tsrange].split(/\s*:\s*/)
    options[:start] = Time.strptime(parts[0].strip, '%Y-%m-%d')
    options[:stop] = Time.strptime(parts[1].strip, '%Y-%m-%d')

  else
    options[:start] = Time.strptime(opts[:tsdate].strip, '%Y-%m-%d')
    options[:stop] = Time.strptime(opts[:tsdate].strip, '%Y-%m-%d')
  end
  
  report = slack.search_time_sheet_activities(options)

  report_out = JSON.generate(report)
  File.open("./time_sheet_activities.txt", "w"){|f| f.write report_out}
  
  puts "\ntime_sheet_activities.txt"
  
elsif opts[:timesheet] #search for timesheet related messages
  options = {}
  if(opts[:tsrange] and opts[:tsrange] == 'last-two-weeks')
    options[:stop] = Date.today.to_time
    options[:start] = options[:stop] - 14*(60*60*24)
    
  elsif(opts[:tsrange])
    parts = opts[:tsrange].split(/\s*:\s*/)
    options[:start] = Time.strptime(parts[0].strip, '%Y-%m-%d')
    options[:stop] = Time.strptime(parts[1].strip, '%Y-%m-%d')

  else
    options[:start] = Time.strptime(opts[:tsdate].strip, '%Y-%m-%d')
    options[:stop] = Time.strptime(opts[:tsdate].strip, '%Y-%m-%d')
  end

  report = slack.search_time_sheet_events(options)
  report_out = JSON.generate(report)
  File.open("./time_sheet_report.txt", "w"){|f| f.write report_out}
  
  puts report_out

elsif opts[:message] #simple text post (not from file)
  slack.post_message(text: opts[:message], channel: params[:channels], as_user: true)

elsif opts[:post] #simple text post
  slack.post_message(text: ARGF.read, channel: params[:channels], as_user: true)
elsif opts[:multipart] #upload multiple individual binary files
  ARGV.each do |arg|
    response = slack.upload({file: File.new(arg), filename: arg}.merge(params))
    puts response['file']['url']
  end
elsif opts[:download] #download a linked file
  uri  = URI(opts[:download])
  file = uri.path.split('/')[3] # 0 is always empty, 1 is always 'files', 2 is always username
  dst  = slack.download({file: file}, opts[:save_as])
  puts "File downloaded to #{dst}"
else #upload concatenated text snippet
  unless(opts[:filename])
    opts[:filename] = ARGF.filename
  end

  slack.upload(params.merge(content: ARGF.read))
end


